<?xml version="1.0" encoding="UTF-8"?>
<!-- user 인증 / 권한을 처리하는 context -->

<!-- beans 태그 내부에 정의할 bean들을 실제 가지고 있는 namespace 설정 -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- beans:beans = security 설정 엘리먼트 태그 -->
	
	<!-- security 인증에 대한 process를 정의해 둔 custom-class bean 설정 -->
	<!-- id / password를 인증 처리하는 클래스 객체 -->
	<beans:bean id="customUserDetailService" class="com.ezen.mini.security.CustomUserDetailsService" />
	
	<!-- password를 암호화하는 클래스 객체 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- security를 적용하지 않는 경로 -->
	<http pattern="/upload" security="none" />
	
	<!-- 권한 / 로그인 관련 처리 auto-config=true : form으로 로그인 / use-expressions=true : spring-EL 사용 -->
	<http auto-config="true" use-expressions="true">
	
		<!-- 권한이 없는 페이지로 접근시 보여줄 에러 페이지 지정 -->
		<access-denied-handler error-page="/home" />
		
		<!-- security iframe 제한 해제 -->
		<headers>
			<frame-options disabled="true" />
		</headers>
	
		<!-- 각각의 요청 경로별 권한 지정(절차적으로 처리하여 윗줄에 정의한 권한이 우선) pattern="path" : 접근 경로 / access="spring-EL" : 허용할 권한 범위 -->
		
		<!-- permitAll : 모두에게 허용 -->
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/Login" access="permitAll" />		
		<intercept-url pattern="/contact" access="permitAll" />
		<intercept-url pattern="/images/**" access="permitAll" />
		<intercept-url pattern="/processLogin" access="permitAll" />
		<intercept-url pattern="/home" access="permitAll" />
		<intercept-url pattern="/main" access="permitAll" />
		
		<!-- isAnonymous() : 로그인하지 않은 user -->
		<intercept-url pattern="/login_view" access="isAnonymous()" />
		<intercept-url pattern="/join_view" access="isAnonymous()" />
		<intercept-url pattern="/login" access="isAnonymous()" />
		<intercept-url pattern="/join" access="isAnonymous()" />
	
		<!-- hasRole('ROLE_##') : 로그인한 회원 중 'ROLE_##' 권한을 가진 user / requires-channel="" : url에 지정한 값이 포함되어 있어야만 접근 -->
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" requires-channel="https" />
		
		<!-- form으로 submit하여 login 관련 설정
			 login-page = 로그인 form이 있는 페이지 지정 
			 login-processing-url = 로그인 폼의 action 경로(security 사용시 /login으로 지정) 
			 username-parameter = id input name
			 password-parameter = pwd input name
			 default-target-url = 로그인 성공시 이동 페이지
			 authentication-failure-url = 로그인 실패시 이동 페이지 및 query 값
			 always-use-default-target = 로그인 성공시 default-target-url로 언제나 이동하는 속성(?)
		 -->
		<form-login login-page="/login_view" 
					login-processing-url="/login"
					username-parameter="pid"
					password-parameter="ppw"
					default-target-url="/product"
					authentication-failure-url="/processLogin?error=1"
					always-use-default-target="true" />
		
		<!-- logout 설정 * 꼭 form에서 submit한 데이터만 security logout 페이지로 연결될 수 있다.
			 invalidate-session = 로그아웃시 session을 초기화할지 여부
			 logout-url = 로그아웃 처리 페이지
			 logout-success-url = 로그아웃 성공 시 이동 페이지
			 delete-cookies = 로그아웃시 삭제할 쿠키 이름
		 -->
		<logout invalidate-session="true"
				logout-url="/logout"
				logout-success-url="/processLogin?logout=1"
				delete-cookies="JSESSIONID, remember-me" />
		
		
		<!-- 명시적으로 로그아웃하지 않았을 때 다시 사이트 입장하면 로그인 상태 유지 -->
		<remember-me remember-me-parameter="remember-me" remember-me-cookie="remember-me" key="wvwvkey" token-validity-seconds="3600" />
		
		<!-- 위조 사이트에서 원 사이트로 접근하는 것을 방지하는 기능 / default가 false이며, 외부 서버 ajax 사용 시 별도 설정 필요  -->
		<csrf disabled="false" />
	</http>
	
	<!-- inmemory 방식 : DB없이 프로젝트에 인증 방식을 저장하여 사용하는 방법 -->
	<!-- 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="guest" password="guest" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	 -->
	
	<!-- 외부 DB를 사용하는 인증 방식 -->
	<authentication-manager>
		<authentication-provider user-service-ref="customUserDetailService">
			<password-encoder ref="passwordEncoder" />
		</authentication-provider>
	</authentication-manager>

</beans:beans>