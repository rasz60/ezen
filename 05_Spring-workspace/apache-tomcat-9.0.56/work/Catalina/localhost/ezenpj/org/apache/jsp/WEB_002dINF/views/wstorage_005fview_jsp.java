/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-04-06 02:03:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class wstorage_005fview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/D:/EzenClass/05_Spring-workspace/apache-tomcat-9.0.56/wtpwebapps/ezenMini/WEB-INF/lib/jstl-1.2.jar!/META-INF/x.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/EzenClass/05_Spring-workspace/apache-tomcat-9.0.56/wtpwebapps/ezenMini/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1644909417825L));
    _jspx_dependants.put("jar:file:/D:/EzenClass/05_Spring-workspace/apache-tomcat-9.0.56/wtpwebapps/ezenMini/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/EzenClass/05_Spring-workspace/apache-tomcat-9.0.56/wtpwebapps/ezenMini/WEB-INF/lib/jstl-1.2.jar!/META-INF/sql.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/D:/EzenClass/05_Spring-workspace/apache-tomcat-9.0.56/wtpwebapps/ezenMini/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("   \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://kit.fontawesome.com/b4e02812b5.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<title></title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container mt-5\">\r\n");
      out.write("	<button type=\"button\" id=\"wsbtn1\" class=\"btn btn-primary\" onclick=\"clickCounter1()\" >문자열 저장</button>\r\n");
      out.write("	<button type=\"button\" id=\"wsbtn2\" class=\"btn btn-danger\" onclick=\"clickCounter2()\" >객체형 저장</button>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container mt-5\">\r\n");
      out.write("	<h3 class=\"text-center display-4\" style=\"font-size:40px;\">문자열 저장 버튼 클릭시 값을 불러옴.</h3>\r\n");
      out.write("	<div id=\"ws1result\" class=\"text-center\" style=\"font-size:25px;\">\r\n");
      out.write("	</div>\r\n");
      out.write("	<br />\r\n");
      out.write("	\r\n");
      out.write("	<h3 class=\"text-center display-4\" style=\"font-size:40px;\">객체형 저장 버튼 클릭시 값을 불러옴.</h3>\r\n");
      out.write("	<div id=\"ws2result\" class=\"text-center\" style=\"font-size:25px;\"></div>\r\n");
      out.write("	<div id=\"ws2div1\" class=\"text-center\" style=\"font-size:25px;\"></div>\r\n");
      out.write("	<div id=\"ws2div2\" class=\"text-center\" style=\"font-size:25px;\"></div>\r\n");
      out.write("	<div id=\"ws2div3\" class=\"text-center\" style=\"font-size:25px;\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("// Local Storage는 서버로 전송하지 않고도 값을 저장할 수 있다. 삭제시키기 전까지 값을 유지하며, 최소 5MB의 저장공간을 제공한다.\r\n");
      out.write("// 브라우저별로 지원하지 않는 경우가 있으니 유의\r\n");
      out.write("\r\n");
      out.write("function clickCounter1() {\r\n");
      out.write("	// browser의 webstorage 지원 여부 확인\r\n");
      out.write("	if ( typeof(Storage) !== 'undefined' ) {\r\n");
      out.write("		// localStorage에 clickcount 값이 있을 때 진입\r\n");
      out.write("		if ( localStorage.clickcount ) {\r\n");
      out.write("			localStorage.clickcount = Number(localStorage.clickcount)+1;\r\n");
      out.write("		} else {\r\n");
      out.write("			// 없으면 clickcount 속성을 만들고 값을 1로 설정\r\n");
      out.write("			localStorage.clickcount = 1;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		document.getElementById('ws1result').innerHTML = \r\n");
      out.write("			\"You have clicked the button \" + localStorage.clickcount + \" time(s).\";\r\n");
      out.write("		\r\n");
      out.write("	} else {\r\n");
      out.write("		document.getElementById('ws2result').innerHTML = \r\n");
      out.write("			\"Sorry, your browser does not support web storage...\";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function clickCounter2() {\r\n");
      out.write("	if ( typeof(Storage) !== 'undefined' ) {\r\n");
      out.write("		localStorage.setItem('lastname', 'Smith');\r\n");
      out.write("		\r\n");
      out.write("		$('#ws2result').html(localStorage.getItem('lastname'));\r\n");
      out.write("		\r\n");
      out.write("		// object 저장을 위한 메서드를 storage 객체에 추가(prototype 사용)\r\n");
      out.write("		Storage.prototype.setObject = function(key, value) {\r\n");
      out.write("			this.setItem(key, JSON.stringify(value));\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// object 반환을 위한 메서드 get 추가\r\n");
      out.write("		Storage.prototype.getObject = function(key) {\r\n");
      out.write("			// key값의 value가 있으면 JSON 객체로 parse하여 반환\r\n");
      out.write("			return this.getItem(key) && JSON.parse((this.getItem(key)));\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		let objectA = {\r\n");
      out.write("				stringValue : new String('okTest'),\r\n");
      out.write("				arrayValue : new Array('A', 'B', 'C')\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		// localStorage에 objectA 저장\r\n");
      out.write("		localStorage.setObject('key1', objectA);\r\n");
      out.write("		\r\n");
      out.write("		// 저장된 objectA를 반환\r\n");
      out.write("		let item1 = localStorage.getObject('key1');		\r\n");
      out.write("		\r\n");
      out.write("		$('#ws2div1').html(item1.stringValue);\r\n");
      out.write("		$('#ws2div2').html(item1.arrayValue.join());\r\n");
      out.write("		\r\n");
      out.write("		$('#ws2div3').html(localStorage.length);\r\n");
      out.write("		for( var i = 0; i < localStorage.length; i++ ) {\r\n");
      out.write("			console.log(localStorage.key(i));\r\n");
      out.write("		}\r\n");
      out.write("	} else {\r\n");
      out.write("		$('ws2result').html(\"Sorry, your browser does not support web storage...\");\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
