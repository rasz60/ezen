import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamEx06 {

	public static void main(String[] args) {
		Student2[] stuArr = {
							new Student2("이자바", 3, 300),
							new Student2("김자바", 1, 200),
							new Student2("안자바", 2, 100),
							new Student2("박자바", 2, 150),
							new Student2("소자바", 1, 200),
							new Student2("나자바", 3, 290),
							new Student2("감자바", 3, 180)
						   };
		
		List<String> names = Stream.of(stuArr).map(Student::getName).collect(Collectors.toList());
		System.out.println(names);
		
		Student2[] stuArr2 = Stream.of(stuArr).toArray(Student2[]::new);
		for( Student s : stuArr2 ) {
			System.out.println(s);
		}
		
		Map<String, String> stuMap = Stream.of(stuArr)
										   .collect(Collectors.toMap(s -> s.
	}

}

class Student2 implements Comparable<Student> {

	String name;
	int ban;
	int totalScore;
	
	Student(String name, int ban, int totalScore) {
		this.name = name;
		this.ban = ban;
		this.totalScore = totalScore;
	}
	
	
	
	@Override
	public String toString() {
		return String.format("[%s, %d, %d]", name, ban, totalScore).toString();
	}



	public String getName() {
		return name;
	}



	public int getBan() {
		return ban;
	}



	public int getTotalScore() {
		return totalScore;
	}



	@Override
	public int compareTo(Student o) {
		// TODO Auto-generated method stub
		return 0;
	}
	
}